#!/usr/bin/env bash
# This script installs proxychains4
# Parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
echo "-----> Installing proxychains4"
# Create directories for Gigalixir environment
mkdir -p $BUILD_DIR/.gigalixir/proxychains
mkdir -p $CACHE_DIR/proxychains
mkdir -p $BUILD_DIR/.profile.d
# Define the download url for proxychains-ng source
PROXYCHAINS_VERSION="4.15"
PROXYCHAINS_URL="https://github.com/rofl0r/proxychains-ng/archive/refs/tags/v${PROXYCHAINS_VERSION}.tar.gz"
# Download and extract
cd $CACHE_DIR/proxychains
if [ ! -f "proxychains-${PROXYCHAINS_VERSION}.tar.gz" ]; then
  echo "-----> Downloading proxychains-ng v${PROXYCHAINS_VERSION}"
  curl -sL "${PROXYCHAINS_URL}" -o "proxychains-${PROXYCHAINS_VERSION}.tar.gz"
  tar -xzf "proxychains-${PROXYCHAINS_VERSION}.tar.gz"
fi
# Build
cd "proxychains-ng-${PROXYCHAINS_VERSION}"
echo "-----> Building proxychains4"
./configure --prefix=$BUILD_DIR/.gigalixir/proxychains
make
make install

# Copy the library to a location in the standard library search path
echo "-----> Installing libproxychains4.so to standard library locations"
mkdir -p $BUILD_DIR/lib
cp $BUILD_DIR/.gigalixir/proxychains/lib/libproxychains4.so $BUILD_DIR/lib/

# Also copy to the app directory where the application will look
mkdir -p $BUILD_DIR/_build/prod/lib/yt_audio_extractor/priv/lib
cp $BUILD_DIR/.gigalixir/proxychains/lib/libproxychains4.so $BUILD_DIR/_build/prod/lib/yt_audio_extractor/priv/lib/

# Create a .so in the standard library path that points to the actual .so
cat > $BUILD_DIR/.profile.d/001_proxychains_symlinks.sh << 'EOF'
#!/usr/bin/env bash
# Create symbolic links to the library in standard locations
mkdir -p $HOME/lib
ln -sf $HOME/.gigalixir/proxychains/lib/libproxychains4.so $HOME/lib/libproxychains4.so

# Also link in the application directory
mkdir -p $HOME/_build/prod/lib/yt_audio_extractor/priv/lib
ln -sf $HOME/.gigalixir/proxychains/lib/libproxychains4.so $HOME/_build/prod/lib/yt_audio_extractor/priv/lib/libproxychains4.so

# Add these directories to LD_LIBRARY_PATH
export LD_LIBRARY_PATH="$HOME/lib:$HOME/_build/prod/lib/yt_audio_extractor/priv/lib:$HOME/.gigalixir/proxychains/lib:${LD_LIBRARY_PATH:-}"
EOF
chmod +x $BUILD_DIR/.profile.d/001_proxychains_symlinks.sh

# Create an export file for other buildpacks
cat > $BUILD_DIR/export << EOF
export PATH="\$HOME/.gigalixir/proxychains/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/lib:\$HOME/_build/prod/lib/yt_audio_extractor/priv/lib:\$HOME/.gigalixir/proxychains/lib:\${LD_LIBRARY_PATH:-}"
EOF
chmod +x $BUILD_DIR/export

# Create a modified proxychains4 wrapper script
cat > $BUILD_DIR/.gigalixir/proxychains/bin/proxychains-wrapper << 'EOF'
#!/usr/bin/env bash
# Set library path to include all possible locations
export LD_LIBRARY_PATH="$HOME/lib:$HOME/_build/prod/lib/yt_audio_extractor/priv/lib:$HOME/.gigalixir/proxychains/lib:${LD_LIBRARY_PATH:-}"

# Run proxychains with all arguments passed through
exec "$HOME/.gigalixir/proxychains/bin/proxychains4" "$@"
EOF
chmod +x $BUILD_DIR/.gigalixir/proxychains/bin/proxychains-wrapper

# Create .profile.d script for runtime environment
cat > $BUILD_DIR/.profile.d/000_proxychains.sh << 'EOF'
#!/usr/bin/env bash
# Set up paths at startup
export PATH="$HOME/.gigalixir/proxychains/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/lib:$HOME/_build/prod/lib/yt_audio_extractor/priv/lib:$HOME/.gigalixir/proxychains/lib:${LD_LIBRARY_PATH:-}"

# Print diagnostic info to app log at startup
echo "Proxychains4 environment initialized"
echo "  - Library paths: $LD_LIBRARY_PATH"
echo "  - Executable: $HOME/.gigalixir/proxychains/bin/proxychains4"
EOF
chmod +x $BUILD_DIR/.profile.d/000_proxychains.sh

echo "-----> proxychains4 installation completed"
