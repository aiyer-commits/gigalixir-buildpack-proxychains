#!/usr/bin/env bash
# This script installs proxychains4
# Parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
echo "-----> Installing proxychains4"
# Create directories for Gigalixir environment
mkdir -p $BUILD_DIR/.gigalixir/proxychains
mkdir -p $CACHE_DIR/proxychains
mkdir -p $BUILD_DIR/.profile.d
# Define the download url for proxychains-ng source
PROXYCHAINS_VERSION="4.15"
PROXYCHAINS_URL="https://github.com/rofl0r/proxychains-ng/archive/refs/tags/v${PROXYCHAINS_VERSION}.tar.gz"
# Download and extract
cd $CACHE_DIR/proxychains
if [ ! -f "proxychains-${PROXYCHAINS_VERSION}.tar.gz" ]; then
  echo "-----> Downloading proxychains-ng v${PROXYCHAINS_VERSION}"
  curl -sL "${PROXYCHAINS_URL}" -o "proxychains-${PROXYCHAINS_VERSION}.tar.gz"
  tar -xzf "proxychains-${PROXYCHAINS_VERSION}.tar.gz"
fi
# Build
cd "proxychains-ng-${PROXYCHAINS_VERSION}"
echo "-----> Building proxychains4"
./configure --prefix=$BUILD_DIR/.gigalixir/proxychains
make
make install

# Create a default proxychains.conf
cat > $BUILD_DIR/.gigalixir/proxychains/proxychains.conf << 'EOF'
# This is just a placeholder config file - your app should provide its own
strict_chain
proxy_dns
# Some reasonable defaults so proxychains doesn't fail without a config
[ProxyList]
socks5 127.0.0.1 9050
EOF

# Create an export file for other buildpacks
cat > $BUILD_DIR/export << EOF
export PATH="\$HOME/.gigalixir/proxychains/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.gigalixir/proxychains/lib:\${LD_LIBRARY_PATH:-}"
EOF
chmod +x $BUILD_DIR/export

# Create a proxychains4 wrapper script
cat > $BUILD_DIR/.gigalixir/proxychains/bin/proxychains-wrapper << 'EOF'
#!/usr/bin/env bash
# Determine config file location
if [ -n "$1" ] && [ "$1" = "-f" ] && [ -n "$2" ]; then
  # User specified a config file
  CONFIG_FILE="$2"
  shift 2
else
  # Look for config in common locations
  if [ -f "./proxychains.conf" ]; then
    CONFIG_FILE="./proxychains.conf"
  elif [ -f "$HOME/proxychains.conf" ]; then
    CONFIG_FILE="$HOME/proxychains.conf"
  elif [ -f "$HOME/.proxychains/proxychains.conf" ]; then
    CONFIG_FILE="$HOME/.proxychains/proxychains.conf"
  elif [ -f "$HOME/.gigalixir/proxychains/proxychains.conf" ]; then
    CONFIG_FILE="$HOME/.gigalixir/proxychains/proxychains.conf"
  else
    echo "ERROR: Could not find proxychains.conf in any standard location"
    echo "Please specify config with -f /path/to/proxychains.conf"
    exit 1
  fi
fi

# Run proxychains with proper library path
export LD_LIBRARY_PATH="$HOME/.gigalixir/proxychains/lib:${LD_LIBRARY_PATH:-}"
exec "$HOME/.gigalixir/proxychains/bin/proxychains4" -f "$CONFIG_FILE" "$@"
EOF
chmod +x $BUILD_DIR/.gigalixir/proxychains/bin/proxychains-wrapper

# Create .profile.d script for runtime environment
cat > $BUILD_DIR/.profile.d/000_proxychains.sh << 'EOF'
#!/usr/bin/env bash
# Set up paths at startup
export PATH="$HOME/.gigalixir/proxychains/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/.gigalixir/proxychains/lib:${LD_LIBRARY_PATH:-}"

# Print diagnostic info to app log at startup
echo "Proxychains4 environment initialized"
echo "  - Library path: $HOME/.gigalixir/proxychains/lib"
echo "  - Executable: $HOME/.gigalixir/proxychains/bin/proxychains4"
echo "  - Default config: $HOME/.gigalixir/proxychains/proxychains.conf"
EOF
chmod +x $BUILD_DIR/.profile.d/000_proxychains.sh

# Verify the installation
echo "-----> Verifying proxychains4 installation"
if [ -f "$BUILD_DIR/.gigalixir/proxychains/lib/libproxychains4.so" ]; then
  echo "-----> libproxychains4.so found at $BUILD_DIR/.gigalixir/proxychains/lib/libproxychains4.so"
else
  echo "-----> ERROR: libproxychains4.so not found! Installation may have failed."
  echo "-----> Checking for other .so files in $BUILD_DIR/.gigalixir/proxychains/lib:"
  find "$BUILD_DIR/.gigalixir/proxychains/lib" -name "*.so" -type f
  exit 1
fi

echo "-----> proxychains4 installation completed"
